                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module subPixCalc
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _newton
                                     12 	.globl _subPixCalc
                                     13 	.globl _projSPC
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area _DATA
    00000000                         21 _activeBones:
    00000000                         22 	.ds 1
    00000001                         23 _boneCounter:
    00000001                         24 	.ds 1
    00000002                         25 _frameCounter:
    00000002                         26 	.ds 1
    00000003                         27 _subPixCalc_fractionX_10000_186:
    00000003                         28 	.ds 2
    00000005                         29 _subPixCalc_fractionY_10000_186:
    00000005                         30 	.ds 2
                                     31 ;--------------------------------------------------------
                                     32 ; ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area _INITIALIZED
                                     35 ;--------------------------------------------------------
                                     36 ; absolute external ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area _DABS (ABS)
                                     39 ;--------------------------------------------------------
                                     40 ; global & static initialisations
                                     41 ;--------------------------------------------------------
                                     42 	.area _HOME
                                     43 	.area _GSINIT
                                     44 	.area _GSFINAL
                                     45 	.area _GSINIT
                                     46 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:30: static int16_t fractionX, fractionY = 0;
    00000000 AF               [ 4]   47 	xor	a, a
    00000001 21r05r00         [12]   48 	ld	hl, #_subPixCalc_fractionY_10000_186
    00000004 22               [ 8]   49 	ld	(hl+), a
    00000005 77               [ 8]   50 	ld	(hl), a
                                     51 ;--------------------------------------------------------
                                     52 ; Home
                                     53 ;--------------------------------------------------------
                                     54 	.area _HOME
                                     55 	.area _HOME
                                     56 ;--------------------------------------------------------
                                     57 ; code
                                     58 ;--------------------------------------------------------
                                     59 	.area _CODE
                                     60 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:28: void subPixCalc(int16_t *valueX, int16_t *valueY, int16_t speedX, int16_t speedY){
                                     61 ;	---------------------------------
                                     62 ; Function subPixCalc
                                     63 ; ---------------------------------
    00000000                         64 _subPixCalc::
    00000000 E8 FC            [16]   65 	add	sp, #-4
    00000002 F8 02            [12]   66 	ldhl	sp,	#2
    00000004 7B               [ 4]   67 	ld	a, e
    00000005 22               [ 8]   68 	ld	(hl+), a
    00000006 72               [ 8]   69 	ld	(hl), d
    00000007 33               [ 8]   70 	inc	sp
    00000008 33               [ 8]   71 	inc	sp
    00000009 C5               [16]   72 	push	bc
                                     73 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:31: fractionX += speedX; // adds speed (which we have as 8 or -8) to the fractional value each frame. we are gaining "8" speed a frame, which becomes 0.03 pixels per frame
    0000000A 21r03r00         [12]   74 	ld	hl, #_subPixCalc_fractionX_10000_186
    0000000D 2A               [ 8]   75 	ld	a, (hl+)
    0000000E 5F               [ 4]   76 	ld	e, a
    0000000F 56               [ 8]   77 	ld	d, (hl)
    00000010 F8 06            [12]   78 	ldhl	sp,	#6
    00000012 2A               [ 8]   79 	ld	a,	(hl+)
    00000013 66               [ 8]   80 	ld	h, (hl)
    00000014 6F               [ 4]   81 	ld	l, a
    00000015 19               [ 8]   82 	add	hl, de
    00000016 5D               [ 4]   83 	ld	e, l
    00000017 54               [ 4]   84 	ld	d, h
    00000018 21r03r00         [12]   85 	ld	hl, #_subPixCalc_fractionX_10000_186
    0000001B 7B               [ 4]   86 	ld	a, e
    0000001C 22               [ 8]   87 	ld	(hl+), a
    0000001D 72               [ 8]   88 	ld	(hl), d
                                     89 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:32: fractionY += speedY;
    0000001E 21r05r00         [12]   90 	ld	hl, #_subPixCalc_fractionY_10000_186
    00000021 2A               [ 8]   91 	ld	a, (hl+)
    00000022 5F               [ 4]   92 	ld	e, a
    00000023 56               [ 8]   93 	ld	d, (hl)
    00000024 F8 08            [12]   94 	ldhl	sp,	#8
    00000026 2A               [ 8]   95 	ld	a,	(hl+)
    00000027 66               [ 8]   96 	ld	h, (hl)
    00000028 6F               [ 4]   97 	ld	l, a
    00000029 19               [ 8]   98 	add	hl, de
    0000002A 5D               [ 4]   99 	ld	e, l
    0000002B 54               [ 4]  100 	ld	d, h
    0000002C 21r05r00         [12]  101 	ld	hl, #_subPixCalc_fractionY_10000_186
    0000002F 7B               [ 4]  102 	ld	a, e
    00000030 22               [ 8]  103 	ld	(hl+), a
    00000031 72               [ 8]  104 	ld	(hl), d
                                    105 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:34: while(fractionX >= (1<<PIXEL_SHIFT)){
    00000032                        106 00101$:
    00000032 21r03r00         [12]  107 	ld	hl, #_subPixCalc_fractionX_10000_186
    00000035 2A               [ 8]  108 	ld	a, (hl+)
    00000036 7E               [ 8]  109 	ld	a, (hl)
    00000037 EE 80            [ 8]  110 	xor	a, #0x80
    00000039 D6 81            [ 8]  111 	sub	a, #0x81
    0000003B 38 1F            [12]  112 	jr	C, 00104$
                                    113 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:37: *valueX += 1;
    0000003D F8 02            [12]  114 	ldhl	sp,#2
    0000003F 2A               [ 8]  115 	ld	a, (hl+)
    00000040 5F               [ 4]  116 	ld	e, a
    00000041 56               [ 8]  117 	ld	d, (hl)
    00000042 1A               [ 8]  118 	ld	a, (de)
    00000043 4F               [ 4]  119 	ld	c, a
    00000044 13               [ 8]  120 	inc	de
    00000045 1A               [ 8]  121 	ld	a, (de)
    00000046 47               [ 4]  122 	ld	b, a
    00000047 03               [ 8]  123 	inc	bc
    00000048 3A               [ 8]  124 	ld	a, (hl-)
    00000049 6E               [ 8]  125 	ld	l, (hl)
    0000004A 67               [ 4]  126 	ld	h, a
    0000004B 79               [ 4]  127 	ld	a, c
    0000004C 22               [ 8]  128 	ld	(hl+), a
    0000004D 70               [ 8]  129 	ld	(hl), b
                                    130 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:38: fractionX -= (1<<PIXEL_SHIFT); // subtracts 256, which resets the fractional part to 0
    0000004E 21r03r00         [12]  131 	ld	hl, #_subPixCalc_fractionX_10000_186
    00000051 2A               [ 8]  132 	ld	a, (hl+)
    00000052 46               [ 8]  133 	ld	b, (hl)
    00000053 2B               [ 8]  134 	dec	hl
    00000054 4F               [ 4]  135 	ld	c,a
    00000055 78               [ 4]  136 	ld	a,b
    00000056 3D               [ 4]  137 	dec	a
    00000057 71               [ 8]  138 	ld	(hl), c
    00000058 23               [ 8]  139 	inc	hl
    00000059 77               [ 8]  140 	ld	(hl), a
    0000005A 18 D6            [12]  141 	jr	00101$
                                    142 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:41: while(fractionX <= -(1<<PIXEL_SHIFT)){
    0000005C                        143 00104$:
    0000005C 21r03r00         [12]  144 	ld	hl, #_subPixCalc_fractionX_10000_186
    0000005F 2A               [ 8]  145 	ld	a, (hl+)
    00000060 4F               [ 4]  146 	ld	c, a
    00000061 46               [ 8]  147 	ld	b, (hl)
    00000062 58               [ 4]  148 	ld	e, b
    00000063 16 FF            [ 8]  149 	ld	d, #0xff
    00000065 AF               [ 4]  150 	xor	a, a
    00000066 B9               [ 4]  151 	cp	a, c
    00000067 3E FF            [ 8]  152 	ld	a, #0xff
    00000069 98               [ 4]  153 	sbc	a, b
    0000006A CB 7B            [ 8]  154 	bit	7, e
    0000006C 28 07            [12]  155 	jr	Z, 00171$
    0000006E CB 7A            [ 8]  156 	bit	7, d
    00000070 20 08            [12]  157 	jr	NZ, 00172$
    00000072 BF               [ 4]  158 	cp	a, a
    00000073 18 05            [12]  159 	jr	00172$
    00000075                        160 00171$:
    00000075 CB 7A            [ 8]  161 	bit	7, d
    00000077 28 01            [12]  162 	jr	Z, 00172$
    00000079 37               [ 4]  163 	scf
    0000007A                        164 00172$:
    0000007A 38 1D            [12]  165 	jr	C, 00107$
                                    166 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:42: *valueX -=1;
    0000007C F8 02            [12]  167 	ldhl	sp,#2
    0000007E 2A               [ 8]  168 	ld	a, (hl+)
    0000007F 5F               [ 4]  169 	ld	e, a
    00000080 56               [ 8]  170 	ld	d, (hl)
    00000081 1A               [ 8]  171 	ld	a, (de)
    00000082 4F               [ 4]  172 	ld	c, a
    00000083 13               [ 8]  173 	inc	de
    00000084 1A               [ 8]  174 	ld	a, (de)
    00000085 47               [ 4]  175 	ld	b, a
    00000086 0B               [ 8]  176 	dec	bc
    00000087 3A               [ 8]  177 	ld	a, (hl-)
    00000088 6E               [ 8]  178 	ld	l, (hl)
    00000089 67               [ 4]  179 	ld	h, a
    0000008A 79               [ 4]  180 	ld	a, c
    0000008B 22               [ 8]  181 	ld	(hl+), a
    0000008C 70               [ 8]  182 	ld	(hl), b
                                    183 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:43: fractionX += (1<<PIXEL_SHIFT);
    0000008D 21r03r00         [12]  184 	ld	hl, #_subPixCalc_fractionX_10000_186
    00000090 2A               [ 8]  185 	ld	a, (hl+)
    00000091 4F               [ 4]  186 	ld	c, a
    00000092 3A               [ 8]  187 	ld	a, (hl-)
    00000093 3C               [ 4]  188 	inc	a
    00000094 71               [ 8]  189 	ld	(hl), c
    00000095 23               [ 8]  190 	inc	hl
    00000096 77               [ 8]  191 	ld	(hl), a
    00000097 18 C3            [12]  192 	jr	00104$
                                    193 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:46: while(fractionY >= (1<<PIXEL_SHIFT)){
    00000099                        194 00107$:
    00000099 21r05r00         [12]  195 	ld	hl, #_subPixCalc_fractionY_10000_186
    0000009C 2A               [ 8]  196 	ld	a, (hl+)
    0000009D 7E               [ 8]  197 	ld	a, (hl)
    0000009E EE 80            [ 8]  198 	xor	a, #0x80
    000000A0 D6 81            [ 8]  199 	sub	a, #0x81
    000000A2 38 1B            [12]  200 	jr	C, 00110$
                                    201 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:47: *valueY += 1;
    000000A4 D1               [12]  202 	pop	de
    000000A5 D5               [16]  203 	push	de
    000000A6 1A               [ 8]  204 	ld	a, (de)
    000000A7 4F               [ 4]  205 	ld	c, a
    000000A8 13               [ 8]  206 	inc	de
    000000A9 1A               [ 8]  207 	ld	a, (de)
    000000AA 47               [ 4]  208 	ld	b, a
    000000AB 03               [ 8]  209 	inc	bc
    000000AC E1               [12]  210 	pop	hl
    000000AD E5               [16]  211 	push	hl
    000000AE 79               [ 4]  212 	ld	a, c
    000000AF 22               [ 8]  213 	ld	(hl+), a
    000000B0 70               [ 8]  214 	ld	(hl), b
                                    215 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:48: fractionY -= (1<<PIXEL_SHIFT);
    000000B1 21r05r00         [12]  216 	ld	hl, #_subPixCalc_fractionY_10000_186
    000000B4 2A               [ 8]  217 	ld	a, (hl+)
    000000B5 46               [ 8]  218 	ld	b, (hl)
    000000B6 2B               [ 8]  219 	dec	hl
    000000B7 4F               [ 4]  220 	ld	c,a
    000000B8 78               [ 4]  221 	ld	a,b
    000000B9 3D               [ 4]  222 	dec	a
    000000BA 71               [ 8]  223 	ld	(hl), c
    000000BB 23               [ 8]  224 	inc	hl
    000000BC 77               [ 8]  225 	ld	(hl), a
    000000BD 18 DA            [12]  226 	jr	00107$
                                    227 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:51: while(fractionY <= -(1<<PIXEL_SHIFT)){
    000000BF                        228 00110$:
    000000BF 21r05r00         [12]  229 	ld	hl, #_subPixCalc_fractionY_10000_186
    000000C2 2A               [ 8]  230 	ld	a, (hl+)
    000000C3 4F               [ 4]  231 	ld	c, a
    000000C4 46               [ 8]  232 	ld	b, (hl)
    000000C5 58               [ 4]  233 	ld	e, b
    000000C6 16 FF            [ 8]  234 	ld	d, #0xff
    000000C8 AF               [ 4]  235 	xor	a, a
    000000C9 B9               [ 4]  236 	cp	a, c
    000000CA 3E FF            [ 8]  237 	ld	a, #0xff
    000000CC 98               [ 4]  238 	sbc	a, b
    000000CD CB 7B            [ 8]  239 	bit	7, e
    000000CF 28 07            [12]  240 	jr	Z, 00173$
    000000D1 CB 7A            [ 8]  241 	bit	7, d
    000000D3 20 08            [12]  242 	jr	NZ, 00174$
    000000D5 BF               [ 4]  243 	cp	a, a
    000000D6 18 05            [12]  244 	jr	00174$
    000000D8                        245 00173$:
    000000D8 CB 7A            [ 8]  246 	bit	7, d
    000000DA 28 01            [12]  247 	jr	Z, 00174$
    000000DC 37               [ 4]  248 	scf
    000000DD                        249 00174$:
    000000DD 38 19            [12]  250 	jr	C, 00113$
                                    251 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:52: *valueY -=1;
    000000DF D1               [12]  252 	pop	de
    000000E0 D5               [16]  253 	push	de
    000000E1 1A               [ 8]  254 	ld	a, (de)
    000000E2 4F               [ 4]  255 	ld	c, a
    000000E3 13               [ 8]  256 	inc	de
    000000E4 1A               [ 8]  257 	ld	a, (de)
    000000E5 47               [ 4]  258 	ld	b, a
    000000E6 0B               [ 8]  259 	dec	bc
    000000E7 E1               [12]  260 	pop	hl
    000000E8 E5               [16]  261 	push	hl
    000000E9 79               [ 4]  262 	ld	a, c
    000000EA 22               [ 8]  263 	ld	(hl+), a
    000000EB 70               [ 8]  264 	ld	(hl), b
                                    265 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:53: fractionY += (1<<PIXEL_SHIFT);
    000000EC 21r05r00         [12]  266 	ld	hl, #_subPixCalc_fractionY_10000_186
    000000EF 2A               [ 8]  267 	ld	a, (hl+)
    000000F0 4F               [ 4]  268 	ld	c, a
    000000F1 3A               [ 8]  269 	ld	a, (hl-)
    000000F2 3C               [ 4]  270 	inc	a
    000000F3 71               [ 8]  271 	ld	(hl), c
    000000F4 23               [ 8]  272 	inc	hl
    000000F5 77               [ 8]  273 	ld	(hl), a
    000000F6 18 C7            [12]  274 	jr	00110$
    000000F8                        275 00113$:
                                    276 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:55: }
    000000F8 E8 04            [16]  277 	add	sp, #4
    000000FA E1               [12]  278 	pop	hl
    000000FB E8 04            [16]  279 	add	sp, #4
    000000FD E9               [ 4]  280 	jp	(hl)
                                    281 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:57: uint16_t newton(uint16_t n){
                                    282 ;	---------------------------------
                                    283 ; Function newton
                                    284 ; ---------------------------------
    000000FE                        285 _newton::
    000000FE 3B               [ 8]  286 	dec	sp
    000000FF 3B               [ 8]  287 	dec	sp
                                    288 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:59: int16_t result = n;
    00000100 4B               [ 4]  289 	ld	c, e
    00000101 42               [ 4]  290 	ld	b, d
                                    291 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:60: int16_t last = 0;
    00000102 AF               [ 4]  292 	xor	a, a
    00000103 F8 00            [12]  293 	ldhl	sp,	#0
    00000105 22               [ 8]  294 	ld	(hl+), a
    00000106 77               [ 8]  295 	ld	(hl), a
                                    296 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:62: while(result != last){
    00000107                        297 00101$:
    00000107 F8 00            [12]  298 	ldhl	sp,	#0
    00000109 7E               [ 8]  299 	ld	a, (hl)
    0000010A 91               [ 4]  300 	sub	a, c
    0000010B 20 05            [12]  301 	jr	NZ, 00120$
    0000010D 23               [ 8]  302 	inc	hl
    0000010E 7E               [ 8]  303 	ld	a, (hl)
    0000010F 90               [ 4]  304 	sub	a, b
    00000110 28 17            [12]  305 	jr	Z, 00103$
    00000112                        306 00120$:
                                    307 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:66: last = result;
    00000112 33               [ 8]  308 	inc	sp
    00000113 33               [ 8]  309 	inc	sp
    00000114 C5               [16]  310 	push	bc
                                    311 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:67: result = (last+(n/last))/2;
    00000115 69               [ 4]  312 	ld	l, c
                                    313 ;	spillPairReg hl
                                    314 ;	spillPairReg hl
    00000116 60               [ 4]  315 	ld	h, b
                                    316 ;	spillPairReg hl
                                    317 ;	spillPairReg hl
    00000117 E5               [16]  318 	push	hl
    00000118 D5               [16]  319 	push	de
    00000119 4D               [ 4]  320 	ld	c, l
    0000011A 44               [ 4]  321 	ld	b, h
    0000011B CDr00r00         [24]  322 	call	__divuint
    0000011E D1               [12]  323 	pop	de
    0000011F E1               [12]  324 	pop	hl
    00000120 09               [ 8]  325 	add	hl, bc
    00000121 4D               [ 4]  326 	ld	c, l
    00000122 44               [ 4]  327 	ld	b, h
    00000123 CB 38            [ 8]  328 	srl	b
    00000125 CB 19            [ 8]  329 	rr	c
    00000127 18 DE            [12]  330 	jr	00101$
    00000129                        331 00103$:
                                    332 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:70: return result;
                                    333 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:93: }
    00000129 33               [ 8]  334 	inc	sp
    0000012A 33               [ 8]  335 	inc	sp
    0000012B C9               [16]  336 	ret
                                    337 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:96: int16_t* projSPC(uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2){
                                    338 ;	---------------------------------
                                    339 ; Function projSPC
                                    340 ; ---------------------------------
    0000012C                        341 _projSPC::
    0000012C E8 F8            [16]  342 	add	sp, #-8
    0000012E F8 06            [12]  343 	ldhl	sp,	#6
    00000130 7B               [ 4]  344 	ld	a, e
    00000131 22               [ 8]  345 	ld	(hl+), a
                                    346 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:99: int16_t slp = 0;
                                    347 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:103: if(x1 != x2){
    00000132 7A               [ 4]  348 	ld	a, d
    00000133 32               [ 8]  349 	ld	(hl-), a
    00000134 11 00 00         [12]  350 	ld	de, #0x0000
    00000137 7E               [ 8]  351 	ld	a, (hl)
    00000138 91               [ 4]  352 	sub	a, c
    00000139 20 05            [12]  353 	jr	NZ, 00113$
    0000013B 23               [ 8]  354 	inc	hl
    0000013C 7E               [ 8]  355 	ld	a, (hl)
    0000013D 90               [ 4]  356 	sub	a, b
    0000013E 28 29            [12]  357 	jr	Z, 00103$
    00000140                        358 00113$:
                                    359 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:106: slp =  (y1-y2) / (x1-x2) >> PIXEL_SHIFT;
    00000140 F8 0A            [12]  360 	ldhl	sp,#10
    00000142 2A               [ 8]  361 	ld	a, (hl+)
    00000143 5F               [ 4]  362 	ld	e, a
    00000144 2A               [ 8]  363 	ld	a, (hl+)
    00000145 57               [ 4]  364 	ld	d, a
    00000146 2A               [ 8]  365 	ld	a,	(hl+)
    00000147 66               [ 8]  366 	ld	h, (hl)
    00000148 6F               [ 4]  367 	ld	l, a
    00000149 7B               [ 4]  368 	ld	a, e
    0000014A 95               [ 4]  369 	sub	a, l
    0000014B 5F               [ 4]  370 	ld	e, a
    0000014C 7A               [ 4]  371 	ld	a, d
    0000014D 9C               [ 4]  372 	sbc	a, h
    0000014E F8 05            [12]  373 	ldhl	sp,	#5
    00000150 32               [ 8]  374 	ld	(hl-), a
    00000151 73               [ 8]  375 	ld	(hl), e
    00000152 F8 06            [12]  376 	ldhl	sp,#6
    00000154 2A               [ 8]  377 	ld	a, (hl+)
    00000155 5F               [ 4]  378 	ld	e, a
    00000156 56               [ 8]  379 	ld	d, (hl)
    00000157 7B               [ 4]  380 	ld	a, e
    00000158 91               [ 4]  381 	sub	a, c
    00000159 5F               [ 4]  382 	ld	e, a
    0000015A 7A               [ 4]  383 	ld	a, d
    0000015B 98               [ 4]  384 	sbc	a, b
    0000015C 47               [ 4]  385 	ld	b, a
    0000015D 4B               [ 4]  386 	ld	c, e
    0000015E F8 04            [12]  387 	ldhl	sp,	#4
    00000160 2A               [ 8]  388 	ld	a, (hl+)
    00000161 5F               [ 4]  389 	ld	e, a
    00000162 56               [ 8]  390 	ld	d, (hl)
    00000163 CDr00r00         [24]  391 	call	__divuint
    00000166 58               [ 4]  392 	ld	e, b
    00000167 16 00            [ 8]  393 	ld	d, #0x00
                                    394 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:109: x1 += 1;
    00000169                        395 00103$:
                                    396 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:114: int16_t deltaX = (pPPF / newton(1+slp*slp));
    00000169 D5               [16]  397 	push	de
    0000016A 4B               [ 4]  398 	ld	c, e
    0000016B 42               [ 4]  399 	ld	b, d
    0000016C CDr00r00         [24]  400 	call	__mulint
    0000016F D1               [12]  401 	pop	de
    00000170 03               [ 8]  402 	inc	bc
    00000171 D5               [16]  403 	push	de
    00000172 59               [ 4]  404 	ld	e, c
    00000173 50               [ 4]  405 	ld	d, b
    00000174 CDrFEr00         [24]  406 	call	_newton
    00000177 11 01 00         [12]  407 	ld	de, #0x0001
    0000017A CDr00r00         [24]  408 	call	__divuint
    0000017D D1               [12]  409 	pop	de
    0000017E F8 04            [12]  410 	ldhl	sp,	#4
    00000180 79               [ 4]  411 	ld	a, c
    00000181 22               [ 8]  412 	ld	(hl+), a
                                    413 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:115: int16_t deltaY = slp*deltaX;
    00000182 78               [ 4]  414 	ld	a, b
    00000183 32               [ 8]  415 	ld	(hl-), a
    00000184 2A               [ 8]  416 	ld	a, (hl+)
    00000185 4F               [ 4]  417 	ld	c, a
    00000186 46               [ 8]  418 	ld	b, (hl)
                                    419 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:117: int16_t deltas[2] = {deltaX,deltaY};
    00000187 CDr00r00         [24]  420 	call	__mulint
    0000018A F8 04            [12]  421 	ldhl	sp,	#4
    0000018C 7E               [ 8]  422 	ld	a, (hl)
    0000018D F8 00            [12]  423 	ldhl	sp,	#0
    0000018F 77               [ 8]  424 	ld	(hl), a
    00000190 F8 05            [12]  425 	ldhl	sp,	#5
    00000192 7E               [ 8]  426 	ld	a, (hl)
    00000193 F8 01            [12]  427 	ldhl	sp,	#1
    00000195 22               [ 8]  428 	ld	(hl+), a
    00000196 71               [ 8]  429 	ld	(hl), c
    00000197 23               [ 8]  430 	inc	hl
    00000198 70               [ 8]  431 	ld	(hl), b
                                    432 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:118: return deltas;
    00000199 21 00 00         [12]  433 	ld	hl, #0
    0000019C 39               [ 8]  434 	add	hl, sp
    0000019D 4D               [ 4]  435 	ld	c, l
    0000019E 44               [ 4]  436 	ld	b, h
                                    437 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:124: }
    0000019F E8 08            [16]  438 	add	sp, #8
    000001A1 E1               [12]  439 	pop	hl
    000001A2 E8 04            [16]  440 	add	sp, #4
    000001A4 E9               [ 4]  441 	jp	(hl)
                                    442 	.area _CODE
                                    443 	.area _INITIALIZER
                                    444 	.area _CABS (ABS)
