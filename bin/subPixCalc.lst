                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module subPixCalc
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _subPixCalc
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 ;--------------------------------------------------------
                                     16 ; ram data
                                     17 ;--------------------------------------------------------
                                     18 	.area _DATA
    00000000                         19 _subPixCalc_fractionX_10000_153:
    00000000                         20 	.ds 2
    00000002                         21 _subPixCalc_fractionY_10000_153:
    00000002                         22 	.ds 2
                                     23 ;--------------------------------------------------------
                                     24 ; ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area _INITIALIZED
                                     27 ;--------------------------------------------------------
                                     28 ; absolute external ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area _DABS (ABS)
                                     31 ;--------------------------------------------------------
                                     32 ; global & static initialisations
                                     33 ;--------------------------------------------------------
                                     34 	.area _HOME
                                     35 	.area _GSINIT
                                     36 	.area _GSFINAL
                                     37 	.area _GSINIT
                                     38 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:25: static int16_t fractionX, fractionY = 0;
    00000000 AF               [ 4]   39 	xor	a, a
    00000001 21r02r00         [12]   40 	ld	hl, #_subPixCalc_fractionY_10000_153
    00000004 22               [ 8]   41 	ld	(hl+), a
    00000005 77               [ 8]   42 	ld	(hl), a
                                     43 ;--------------------------------------------------------
                                     44 ; Home
                                     45 ;--------------------------------------------------------
                                     46 	.area _HOME
                                     47 	.area _HOME
                                     48 ;--------------------------------------------------------
                                     49 ; code
                                     50 ;--------------------------------------------------------
                                     51 	.area _CODE
                                     52 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:23: void subPixCalc(int16_t *valueX, int16_t *valueY, int16_t speedX, int16_t speedY){
                                     53 ;	---------------------------------
                                     54 ; Function subPixCalc
                                     55 ; ---------------------------------
    00000000                         56 _subPixCalc::
    00000000 E8 FC            [16]   57 	add	sp, #-4
    00000002 F8 02            [12]   58 	ldhl	sp,	#2
    00000004 7B               [ 4]   59 	ld	a, e
    00000005 22               [ 8]   60 	ld	(hl+), a
    00000006 72               [ 8]   61 	ld	(hl), d
    00000007 33               [ 8]   62 	inc	sp
    00000008 33               [ 8]   63 	inc	sp
    00000009 C5               [16]   64 	push	bc
                                     65 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:26: fractionX += speedX; // adds speed (which we have as 8 or -8) to the fractional value each frame. we are gaining "8" speed a frame, which becomes 0.03 pixels per frame
    0000000A 21r00r00         [12]   66 	ld	hl, #_subPixCalc_fractionX_10000_153
    0000000D 2A               [ 8]   67 	ld	a, (hl+)
    0000000E 5F               [ 4]   68 	ld	e, a
    0000000F 56               [ 8]   69 	ld	d, (hl)
    00000010 F8 06            [12]   70 	ldhl	sp,	#6
    00000012 2A               [ 8]   71 	ld	a,	(hl+)
    00000013 66               [ 8]   72 	ld	h, (hl)
    00000014 6F               [ 4]   73 	ld	l, a
    00000015 19               [ 8]   74 	add	hl, de
    00000016 5D               [ 4]   75 	ld	e, l
    00000017 54               [ 4]   76 	ld	d, h
    00000018 21r00r00         [12]   77 	ld	hl, #_subPixCalc_fractionX_10000_153
    0000001B 7B               [ 4]   78 	ld	a, e
    0000001C 22               [ 8]   79 	ld	(hl+), a
    0000001D 72               [ 8]   80 	ld	(hl), d
                                     81 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:27: fractionY += speedY;
    0000001E 21r02r00         [12]   82 	ld	hl, #_subPixCalc_fractionY_10000_153
    00000021 2A               [ 8]   83 	ld	a, (hl+)
    00000022 5F               [ 4]   84 	ld	e, a
    00000023 56               [ 8]   85 	ld	d, (hl)
    00000024 F8 08            [12]   86 	ldhl	sp,	#8
    00000026 2A               [ 8]   87 	ld	a,	(hl+)
    00000027 66               [ 8]   88 	ld	h, (hl)
    00000028 6F               [ 4]   89 	ld	l, a
    00000029 19               [ 8]   90 	add	hl, de
    0000002A 5D               [ 4]   91 	ld	e, l
    0000002B 54               [ 4]   92 	ld	d, h
    0000002C 21r02r00         [12]   93 	ld	hl, #_subPixCalc_fractionY_10000_153
    0000002F 7B               [ 4]   94 	ld	a, e
    00000030 22               [ 8]   95 	ld	(hl+), a
    00000031 72               [ 8]   96 	ld	(hl), d
                                     97 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:29: while(fractionX >= (1<<PIXEL_SHIFT)){ // shifting the bits left by 8 multiplies by 2^8 (256), so as long as fractionX is greater than or equal to 256, move object by one pixel
    00000032                         98 00101$:
    00000032 21r00r00         [12]   99 	ld	hl, #_subPixCalc_fractionX_10000_153
    00000035 2A               [ 8]  100 	ld	a, (hl+)
    00000036 7E               [ 8]  101 	ld	a, (hl)
    00000037 EE 80            [ 8]  102 	xor	a, #0x80
    00000039 D6 81            [ 8]  103 	sub	a, #0x81
    0000003B 38 1F            [12]  104 	jr	C, 00104$
                                    105 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:30: *valueX += 1;
    0000003D F8 02            [12]  106 	ldhl	sp,#2
    0000003F 2A               [ 8]  107 	ld	a, (hl+)
    00000040 5F               [ 4]  108 	ld	e, a
    00000041 56               [ 8]  109 	ld	d, (hl)
    00000042 1A               [ 8]  110 	ld	a, (de)
    00000043 4F               [ 4]  111 	ld	c, a
    00000044 13               [ 8]  112 	inc	de
    00000045 1A               [ 8]  113 	ld	a, (de)
    00000046 47               [ 4]  114 	ld	b, a
    00000047 03               [ 8]  115 	inc	bc
    00000048 3A               [ 8]  116 	ld	a, (hl-)
    00000049 6E               [ 8]  117 	ld	l, (hl)
    0000004A 67               [ 4]  118 	ld	h, a
    0000004B 79               [ 4]  119 	ld	a, c
    0000004C 22               [ 8]  120 	ld	(hl+), a
    0000004D 70               [ 8]  121 	ld	(hl), b
                                    122 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:31: fractionX -= (1<<PIXEL_SHIFT); // subtracts 256, which resets the fractional part to 0
    0000004E 21r00r00         [12]  123 	ld	hl, #_subPixCalc_fractionX_10000_153
    00000051 2A               [ 8]  124 	ld	a, (hl+)
    00000052 46               [ 8]  125 	ld	b, (hl)
    00000053 2B               [ 8]  126 	dec	hl
    00000054 4F               [ 4]  127 	ld	c,a
    00000055 78               [ 4]  128 	ld	a,b
    00000056 3D               [ 4]  129 	dec	a
    00000057 71               [ 8]  130 	ld	(hl), c
    00000058 23               [ 8]  131 	inc	hl
    00000059 77               [ 8]  132 	ld	(hl), a
    0000005A 18 D6            [12]  133 	jr	00101$
                                    134 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:34: while(fractionX <= -(1<<PIXEL_SHIFT)){
    0000005C                        135 00104$:
    0000005C 21r00r00         [12]  136 	ld	hl, #_subPixCalc_fractionX_10000_153
    0000005F 2A               [ 8]  137 	ld	a, (hl+)
    00000060 4F               [ 4]  138 	ld	c, a
    00000061 46               [ 8]  139 	ld	b, (hl)
    00000062 58               [ 4]  140 	ld	e, b
    00000063 16 FF            [ 8]  141 	ld	d, #0xff
    00000065 AF               [ 4]  142 	xor	a, a
    00000066 B9               [ 4]  143 	cp	a, c
    00000067 3E FF            [ 8]  144 	ld	a, #0xff
    00000069 98               [ 4]  145 	sbc	a, b
    0000006A CB 7B            [ 8]  146 	bit	7, e
    0000006C 28 07            [12]  147 	jr	Z, 00171$
    0000006E CB 7A            [ 8]  148 	bit	7, d
    00000070 20 08            [12]  149 	jr	NZ, 00172$
    00000072 BF               [ 4]  150 	cp	a, a
    00000073 18 05            [12]  151 	jr	00172$
    00000075                        152 00171$:
    00000075 CB 7A            [ 8]  153 	bit	7, d
    00000077 28 01            [12]  154 	jr	Z, 00172$
    00000079 37               [ 4]  155 	scf
    0000007A                        156 00172$:
    0000007A 38 1D            [12]  157 	jr	C, 00107$
                                    158 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:35: *valueX -=1;
    0000007C F8 02            [12]  159 	ldhl	sp,#2
    0000007E 2A               [ 8]  160 	ld	a, (hl+)
    0000007F 5F               [ 4]  161 	ld	e, a
    00000080 56               [ 8]  162 	ld	d, (hl)
    00000081 1A               [ 8]  163 	ld	a, (de)
    00000082 4F               [ 4]  164 	ld	c, a
    00000083 13               [ 8]  165 	inc	de
    00000084 1A               [ 8]  166 	ld	a, (de)
    00000085 47               [ 4]  167 	ld	b, a
    00000086 0B               [ 8]  168 	dec	bc
    00000087 3A               [ 8]  169 	ld	a, (hl-)
    00000088 6E               [ 8]  170 	ld	l, (hl)
    00000089 67               [ 4]  171 	ld	h, a
    0000008A 79               [ 4]  172 	ld	a, c
    0000008B 22               [ 8]  173 	ld	(hl+), a
    0000008C 70               [ 8]  174 	ld	(hl), b
                                    175 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:36: fractionX += (1<<PIXEL_SHIFT);
    0000008D 21r00r00         [12]  176 	ld	hl, #_subPixCalc_fractionX_10000_153
    00000090 2A               [ 8]  177 	ld	a, (hl+)
    00000091 4F               [ 4]  178 	ld	c, a
    00000092 3A               [ 8]  179 	ld	a, (hl-)
    00000093 3C               [ 4]  180 	inc	a
    00000094 71               [ 8]  181 	ld	(hl), c
    00000095 23               [ 8]  182 	inc	hl
    00000096 77               [ 8]  183 	ld	(hl), a
    00000097 18 C3            [12]  184 	jr	00104$
                                    185 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:39: while(fractionY >= (1<<PIXEL_SHIFT)){
    00000099                        186 00107$:
    00000099 21r02r00         [12]  187 	ld	hl, #_subPixCalc_fractionY_10000_153
    0000009C 2A               [ 8]  188 	ld	a, (hl+)
    0000009D 7E               [ 8]  189 	ld	a, (hl)
    0000009E EE 80            [ 8]  190 	xor	a, #0x80
    000000A0 D6 81            [ 8]  191 	sub	a, #0x81
    000000A2 38 1B            [12]  192 	jr	C, 00110$
                                    193 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:40: *valueY += 1;
    000000A4 D1               [12]  194 	pop	de
    000000A5 D5               [16]  195 	push	de
    000000A6 1A               [ 8]  196 	ld	a, (de)
    000000A7 4F               [ 4]  197 	ld	c, a
    000000A8 13               [ 8]  198 	inc	de
    000000A9 1A               [ 8]  199 	ld	a, (de)
    000000AA 47               [ 4]  200 	ld	b, a
    000000AB 03               [ 8]  201 	inc	bc
    000000AC E1               [12]  202 	pop	hl
    000000AD E5               [16]  203 	push	hl
    000000AE 79               [ 4]  204 	ld	a, c
    000000AF 22               [ 8]  205 	ld	(hl+), a
    000000B0 70               [ 8]  206 	ld	(hl), b
                                    207 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:41: fractionY -= (1<<PIXEL_SHIFT);
    000000B1 21r02r00         [12]  208 	ld	hl, #_subPixCalc_fractionY_10000_153
    000000B4 2A               [ 8]  209 	ld	a, (hl+)
    000000B5 46               [ 8]  210 	ld	b, (hl)
    000000B6 2B               [ 8]  211 	dec	hl
    000000B7 4F               [ 4]  212 	ld	c,a
    000000B8 78               [ 4]  213 	ld	a,b
    000000B9 3D               [ 4]  214 	dec	a
    000000BA 71               [ 8]  215 	ld	(hl), c
    000000BB 23               [ 8]  216 	inc	hl
    000000BC 77               [ 8]  217 	ld	(hl), a
    000000BD 18 DA            [12]  218 	jr	00107$
                                    219 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:44: while(fractionY <= -(1<<PIXEL_SHIFT)){
    000000BF                        220 00110$:
    000000BF 21r02r00         [12]  221 	ld	hl, #_subPixCalc_fractionY_10000_153
    000000C2 2A               [ 8]  222 	ld	a, (hl+)
    000000C3 4F               [ 4]  223 	ld	c, a
    000000C4 46               [ 8]  224 	ld	b, (hl)
    000000C5 58               [ 4]  225 	ld	e, b
    000000C6 16 FF            [ 8]  226 	ld	d, #0xff
    000000C8 AF               [ 4]  227 	xor	a, a
    000000C9 B9               [ 4]  228 	cp	a, c
    000000CA 3E FF            [ 8]  229 	ld	a, #0xff
    000000CC 98               [ 4]  230 	sbc	a, b
    000000CD CB 7B            [ 8]  231 	bit	7, e
    000000CF 28 07            [12]  232 	jr	Z, 00173$
    000000D1 CB 7A            [ 8]  233 	bit	7, d
    000000D3 20 08            [12]  234 	jr	NZ, 00174$
    000000D5 BF               [ 4]  235 	cp	a, a
    000000D6 18 05            [12]  236 	jr	00174$
    000000D8                        237 00173$:
    000000D8 CB 7A            [ 8]  238 	bit	7, d
    000000DA 28 01            [12]  239 	jr	Z, 00174$
    000000DC 37               [ 4]  240 	scf
    000000DD                        241 00174$:
    000000DD 38 19            [12]  242 	jr	C, 00113$
                                    243 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:45: *valueY -=1;
    000000DF D1               [12]  244 	pop	de
    000000E0 D5               [16]  245 	push	de
    000000E1 1A               [ 8]  246 	ld	a, (de)
    000000E2 4F               [ 4]  247 	ld	c, a
    000000E3 13               [ 8]  248 	inc	de
    000000E4 1A               [ 8]  249 	ld	a, (de)
    000000E5 47               [ 4]  250 	ld	b, a
    000000E6 0B               [ 8]  251 	dec	bc
    000000E7 E1               [12]  252 	pop	hl
    000000E8 E5               [16]  253 	push	hl
    000000E9 79               [ 4]  254 	ld	a, c
    000000EA 22               [ 8]  255 	ld	(hl+), a
    000000EB 70               [ 8]  256 	ld	(hl), b
                                    257 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:46: fractionY += (1<<PIXEL_SHIFT);
    000000EC 21r02r00         [12]  258 	ld	hl, #_subPixCalc_fractionY_10000_153
    000000EF 2A               [ 8]  259 	ld	a, (hl+)
    000000F0 4F               [ 4]  260 	ld	c, a
    000000F1 3A               [ 8]  261 	ld	a, (hl-)
    000000F2 3C               [ 4]  262 	inc	a
    000000F3 71               [ 8]  263 	ld	(hl), c
    000000F4 23               [ 8]  264 	inc	hl
    000000F5 77               [ 8]  265 	ld	(hl), a
    000000F6 18 C7            [12]  266 	jr	00110$
    000000F8                        267 00113$:
                                    268 ;C:\Users\wsajj\GBdev\gbdk\_code\gbJam24\source\Mechanic\subPixCalc.c:48: }
    000000F8 E8 04            [16]  269 	add	sp, #4
    000000FA E1               [12]  270 	pop	hl
    000000FB E8 04            [16]  271 	add	sp, #4
    000000FD E9               [ 4]  272 	jp	(hl)
                                    273 	.area _CODE
                                    274 	.area _INITIALIZER
                                    275 	.area _CABS (ABS)
